【課題内容】
<ライブラリ・APIの利用系>
　- tailwindcss をインストールして、リデザインする done
　- Dog API を使って、TODOが完了したタイミングで犬の画像を表示させる done
　- [https://dog.ceo/dog-api/](https://dog.ceo/dog-api/)
　- TODOを3つ完了させるたびに、Tipsを表示させる done
　- [https://api.adviceslip.com/#endpoint-random](https://api.adviceslip.com/#endpoint-random)
　- 上記を含めてテストコードを書く

<機能系>
　- タスクの期日管理機能を追加する done
　- タスクのアサイン機能を追加する done
　- 親タスク・子タスクの管理機能を追加する done
　- タスクのフィルタリング・並び替え・ソート機能を追加する done
　- タスクの重要度設定・閲覧機能を追加する done
　- その他、追加したい機能があれば


// Dog image APIのmock
  global.fetch = jest.fn(() =>
    Promise.resolve({
      json: () => Promise.resolve({ message: "testImageUrl" }),
    })
  );


  test("fetches dog image and updates state on todo click", async () => {
    // setDogImageをモックします
    const setDogImage = jest.fn();

    // Appコンポーネントをレンダリングします
    const { getByText, getByTestId, getByPlaceholderText } = render(<App setDogImage={setDogImage} />);

    //
    const taskName = "New Task";
    fireEvent.change(getByPlaceholderText(/タスクの名前/i), { target: { value: taskName } });
    fireEvent.click(getByTestId('adding-task-button'));

    // Todoアイテムを取得し、クリックします
    const todoItem = getByText(taskName);
    fireEvent.click(todoItem);

    // fetchDogが呼び出され、setDogImageが正しい引数で呼び出されたことを確認します
    expect(setDogImage).toHaveBeenCalledTimes(1);
    expect(setDogImage).toHaveBeenCalledWith(
      <img
        src="testImageUrl"
        alt="dogImage"
        data-testid="dogImage"
        style={{ height: "80px", width: "auto" }}
      />
    );
  });